
- name: Install zip
  package:
    name: zip
    state: present
  become: true

- name: Install unzip
  package:
    name: unzip
    state: present
  become: true

- name: Install net-tools
  package:
    name: net-tools
    state: present
  become: true

- name: Install and configure SDKMAN!
  block:
    - name: Install SDKMAN!
      ansible.builtin.shell: "curl -s 'https://get.sdkman.io' | bash"
      args:
        creates: "{{ sdkman_folder }}/etc/config"

    - name: Configure SDKMAN!
      ansible.builtin.shell: |
        sed -i 's/sdkman_auto_answer=false/sdkman_auto_answer=true/g' "{{ sdkman_folder }}/etc/config"

    - name: Install all JDKs
      ansible.builtin.shell: |
        source {{ sdkman_folder }}/bin/sdkman-init.sh
        echo "Installing JDK {{ item }}"
        sdk install java {{ item }}
      args:
        executable: /bin/bash
      loop: "{{ jdks }}"

    - name: Cleaning up
      ansible.builtin.shell: |
        source {{ sdkman_folder }}/bin/sdkman-init.sh
        sdk flush
      args:
        executable: /bin/bash

- name: Install and configure asprof
  block:
    - name: Check if asprof already downloaded
      stat:
        path: "{{ remote_folder }}/asprof.tar.gz"
      register: stat_result

    - name: Async-profiler for x86_64 arch
      set_fact:
        asprof_arch: "x64"
      when: "{{ ansible_facts.architecture == 'x86_64' }}"

    - name: Async-profiler for ARM
      set_fact:
        asprof_arch: "arm64"
      when: "{{ ansible_facts.architecture == 'aarch64' }}"

    - name: Download async-profiler {{ asprof_arch }}
      ansible.builtin.get_url:
        #url: "https://github.com/async-profiler/async-profiler/releases/download/v3.0/async-profiler-3.0-linux-{{ asprof_arch }}.tar.gz"
        url: "https://github.com/async-profiler/async-profiler/releases/download/nightly/async-profiler-3.0-d1498a6-linux-{{ asprof-arch }}.tar.gz"
        dest: "{{ remote_folder }}/asprof.tar.gz"
      when: not stat_result.stat.exists

    - name: Unarchive async-profiler
      ansible.builtin.unarchive:
        src: "{{ remote_folder }}/asprof.tar.gz"
        dest: "{{ remote_folder }}"
        remote_src: yes
      when: not stat_result.stat.exists


- name: Install rsync
  package:
    name: rsync
    state: present
  become: true
